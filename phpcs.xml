<?xml version="1.0"?>
<ruleset name="OSEC-PSR-12">
	<description>Generally PSR-12 with some Wordpress Fragments.</description>

	<!-- What to scan -->

	<!-- WHITELIST -->
	<!--	<file>./src/</file>-->
	<!--	<file>./tests/</file>-->
	<!--	<file>./public/</file>-->
	<!--	<file>./constants.php</file>-->
	<!--	<file>./global-functions.php</file>-->
	<!--	<file>./open-source-event-calendar.php</file>-->

	<!-- BLACKLIST  -->
	<file>./</file>
	<exclude-pattern>/vendor/</exclude-pattern>
    <exclude-pattern>/calendar_block/</exclude-pattern>
	<exclude-pattern>/hookster/</exclude-pattern>
	<exclude-pattern>/public/</exclude-pattern>
	<exclude-pattern>/cache/</exclude-pattern>
	<exclude-pattern>/node_modules/</exclude-pattern>

	<!-- TODO Decide :)  -->

	<!-- How to scan -->
	<!-- Usage instructions: https://github.com/squizlabs/PHP_CodeSniffer/wiki/Usage -->
	<!-- Annotated ruleset: https://github.com/squizlabs/PHP_CodeSniffer/wiki/Annotated-ruleset.xml -->
	<arg value="sp"/> <!-- Show sniff and progress -->
	<arg name="basepath" value="./"/><!-- Strip the file paths down to the relevant bit -->
	<arg name="colors"/>
	<arg name="extensions" value="php"/>
	<arg name="parallel" value="8"/><!-- Enables parallel processing when available for faster results. -->

	<!--
        #############################################################################
        SET UP THE RULESETS
        #############################################################################
	-->

	<!-- Rules: Check PHP version compatibility -->
	<!-- https://github.com/PHPCompatibility/PHPCompatibility#sniffing-your-code-for-compatibility-with-specific-php-versions -->
	<config name="testVersion" value="8.1-"/>
	<!-- https://github.com/PHPCompatibility/PHPCompatibilityWP -->
	<rule ref="PHPCompatibilityWP"/>

	<!-- Rules: WordPress Coding Standards -->
	<!-- https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards -->
	<!-- https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/wiki/Customizable-sniff-properties -->
	<config name="minimum_supported_wp_version" value="6.2"/>

	<rule ref="PSR12">
		<exclude name="PSR1.Methods.CamelCapsMethodName.NotCamelCaps" />
<!--		<exclude name="PSR2.Classes.PropertyDeclaration.Underscore" />-->
		<exclude name="PSR2.Methods.MethodDeclaration.Underscore" />
<!--		<exclude name="Generic.Files.LineLength.TooLong" />-->
		<exclude name="PSR12.ControlStructures.ControlStructureSpacing"/>
	</rule>

<!--
	Add WordPress-Extra Rolset WOTHOUT WordPress-Core
		@see https://github.com/WordPress/WordPress-Coding-Standards/blob/develop/WordPress-Extra/ruleset.xml
-->

	<!-- Generic PHP best practices.
		 https://github.com/WordPress/WordPress-Coding-Standards/pull/382 -->
	<rule ref="Generic.PHP.DeprecatedFunctions"/>
	<rule ref="Generic.PHP.ForbiddenFunctions"/>
	<rule ref="Generic.Functions.CallTimePassByReference"/>
	<rule ref="Generic.CodeAnalysis.EmptyStatement"/>
	<rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>
	<rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall"/>
	<rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>
	<rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
	<rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
	<rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>
	<rule ref="Generic.Classes.DuplicateClassName"/>
	<rule ref="Generic.Strings.UnnecessaryStringConcat">
		<properties>
			<property name="allowMultiline" value="true"/>
		</properties>
	</rule>

	<!-- More generic PHP best practices.
		 https://github.com/WordPress/WordPress-Coding-Standards/issues/607 -->
	<rule ref="Squiz.PHP.NonExecutableCode"/>
	<rule ref="Squiz.Operators.IncrementDecrementUsage"/>
	<rule ref="Squiz.Operators.ValidLogicalOperators"/>
	<rule ref="Squiz.Functions.FunctionDuplicateArgument"/>

	<!-- And even more generic PHP best practices.
		 https://github.com/WordPress/WordPress-Coding-Standards/pull/809 -->
	<rule ref="Squiz.PHP.DisallowSizeFunctionsInLoops"/>

	<!-- Do not allow ambiguous conditions.
		 https://github.com/WordPress/WordPress-Coding-Standards/issues/2429 -->
	<rule ref="Generic.CodeAnalysis.RequireExplicitBooleanOperatorPrecedence"/>

	<!-- Check that functions use all parameters passed.
		 https://github.com/WordPress/WordPress-Coding-Standards/issues/1510 -->
	<rule ref="Generic.CodeAnalysis.UnusedFunctionParameter">
		<!-- Allow for callback functions which may not need all parameters passed. -->
		<exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundBeforeLastUsed"/>
		<!-- Allow for functions in extended classes/implemented interfaces. -->
		<exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundInExtendedClass"/>
		<exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundInExtendedClassBeforeLastUsed"/>
		<exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundInExtendedClassAfterLastUsed"/>
		<exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundInImplementedInterface"/>
		<exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundInImplementedInterfaceBeforeLastUsed"/>
		<exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundInImplementedInterfaceAfterLastUsed"/>
	</rule>

	<!-- Do not allow leading underscores in property or method names. Visibility should be used instead.
		 https://github.com/WordPress/WordPress-Coding-Standards/issues/1101 -->
	<rule ref="PSR2.Classes.PropertyDeclaration.Underscore">
		<severity>5</severity>
	</rule>
	<rule ref="PSR2.Methods.MethodDeclaration.Underscore">
		<severity>5</severity>
	</rule>

	<!--	TODO FIX THIS   -->
	<!--	<rule ref="WordPress.Security.EscapeOutput"/>-->

	<!-- Encourage use of wp_safe_redirect() to avoid open redirect vulnerabilities.
		 https://github.com/WordPress/WordPress-Coding-Standards/pull/1264 -->
	<rule ref="WordPress.Security.SafeRedirect"/>

	<!-- Verify that a nonce check is done before using values in superglobals.
		 https://github.com/WordPress/WordPress-Coding-Standards/issues/73 -->

	<!--	TODO FIX THIS   -->
	<!--	<rule ref="WordPress.Security.NonceVerification"/>-->

	<rule ref="WordPress.PHP.DevelopmentFunctions"/>
	<rule ref="WordPress.PHP.DiscouragedPHPFunctions"/>
	<rule ref="WordPress.WP.DeprecatedFunctions"/>
	<rule ref="WordPress.WP.DeprecatedClasses"/>
	<rule ref="WordPress.WP.DeprecatedParameters"/>
	<rule ref="WordPress.WP.DeprecatedParameterValues"/>
	<rule ref="WordPress.WP.AlternativeFunctions"/>
	<rule ref="WordPress.WP.DiscouragedConstants"/>
	<rule ref="WordPress.WP.DiscouragedFunctions"/>

	<!-- Verify that capabilities are being used correctly. -->
	<rule ref="WordPress.WP.Capabilities"/>

	<!-- Scripts & style should be enqueued.
		 https://github.com/WordPress/WordPress-Coding-Standards/issues/35 -->
	<rule ref="WordPress.WP.EnqueuedResources"/>

	<!-- Warn against overriding WP global variables.
		 https://github.com/WordPress/WordPress-Coding-Standards/issues/26 -->
	<rule ref="WordPress.WP.GlobalVariablesOverride"/>

	<!-- Detect incorrect or risky use of the `ini_set()` function.
		 https://github.com/WordPress/WordPress-Coding-Standards/issues/1447 -->
	<rule ref="WordPress.PHP.IniSet"/>

	<!-- Check enqueue and register styles and scripts to have version and in_footer parameters explicitly set.
		 https://github.com/WordPress/WordPress-Coding-Standards/issues/1146 -->
	<rule ref="WordPress.WP.EnqueuedResourceParameters"/>


	<!-- Check for PHP Parse errors.
		 https://github.com/WordPress/WordPress-Coding-Standards/issues/522 -->
	<rule ref="Generic.PHP.Syntax"/>

	<!-- Make the translators comment check which is included in core stricter. -->
	<rule ref="WordPress.WP.I18n.MissingTranslatorsComment">
		<type>error</type>
	</rule>
	<rule ref="WordPress.WP.I18n.TranslatorsCommentWrongStyle">
		<type>error</type>
	</rule>

	<!-- Verify that everything in the global namespace is prefixed. -->
	<rule ref="WordPress.NamingConventions.PrefixAllGlobals"/>

	<!-- Validates post type slugs for valid characters, length and reserved keywords. -->
	<rule ref="WordPress.NamingConventions.ValidPostTypeSlug"/>

	<!-- https://github.com/WordPress/WordPress-Coding-Standards/issues/1157 -->
	<rule ref="WordPress.Security.PluginMenuSlug"/>
	<rule ref="WordPress.WP.CronInterval"/>
	<rule ref="WordPress.WP.PostsPerPage"/>

	<!-- Verify some regex best practices.
		 https://github.com/WordPress/WordPress-Coding-Standards/issues/1371 -->
	<rule ref="WordPress.PHP.PregQuoteDelimiter"/>

	<!-- The Core ruleset respects the PHP allowed functions list. For `Extra` the sniff is stricter.
		 https://github.com/WordPress/WordPress-Coding-Standards/pull/1450 -->
	<rule ref="WordPress.PHP.NoSilencedErrors">
		<properties>
			<property name="usePHPFunctionsList" value="false"/>
		</properties>
	</rule>

	<!-- Commented out code should not be committed.
		 https://github.com/WordPress/WordPress-Coding-Standards/pull/1463 -->
	<rule ref="Squiz.PHP.CommentedOutCode">
		<properties>
			<property name="maxPercentage" value="40"/>
		</properties>
	</rule>

	<!-- Prevent some typical mistakes people make accidentally.
		 https://github.com/WordPress/WordPress-Coding-Standards/pull/1777 -->
	<rule ref="WordPress.CodeAnalysis.EscapedNotTranslated"/>

	<!-- Detects duplicate array keys in array declarations. -->
	<rule ref="Universal.Arrays.DuplicateArrayKey"/>

	<!-- Disallows return type declarations on constructor/destructor methods,
		 and constructor/destructor methods returning a value. -->
	<rule ref="Universal.CodeAnalysis.ConstructorDestructorReturn"/>

	<!-- Detects foreach control structures using the same variable for both key and value. -->
	<rule ref="Universal.CodeAnalysis.ForeachUniqueAssignment"/>

	<!-- Detects using static instead of self in object-oriented constructs which are final. -->
	<rule ref="Universal.CodeAnalysis.StaticInFinalClass"/>

	<!-- Disallow if statements, if they are the only statement in an else block. -->
	<rule ref="Universal.ControlStructures.DisallowLonelyIf"/>

	<!-- Enforce for a file to either declare (global/namespaced) functions
		 or declare object-oriented structures, but not both. -->
	<rule ref="Universal.Files.SeparateFunctionsFromOO"/>

	<!-- Detect useless "echo sprintf(...)". -->
	<rule ref="Universal.CodeAnalysis.NoEchoSprintf"/>

	<!-- Detect use of double negative `!!`. -->
	<rule ref="Universal.CodeAnalysis.NoDoubleNegative"/>

</ruleset>
